"use client";

import {useState} from "react";

export default function Text() {
  const [text, setText] = useState("");

  return (
    <input type="text" value={text} onChange={(e) => setText(e.target.value)} />
  )
}

// next.js에서는 컴포넌트 기본값이 서버 컴포넌트.

/*
<서버 컴포넌트>
- 기본 모드
- useState, useEffect와 같은 훅 사용 불가
- 정적. 읽기 전용 UI로 생각하면됨. (빠르고 가볍)

<클라이언트 컴포넌트>
- "use client"를 상단에 표기
- useState, useEffect, usseRef와 같은 리액트 훅 사용가능
- 상호작용, 입력, 이벤트 처리가 필요한 UI일때 (브라우저 부담이 올라감)
- 브라우저에서 동적으로 작동해야하는 UI에서 사용. ex) 버튼 클릭, 입력창, 모달 등
*/

// -----------------------------------------------------------------------------

/*
<서버 컴포넌트 사용처>
- 정적인 텍스트나 이미지 표시
  ex) 회사소개, 블로그 글 본문, 공지사항과 같은

- DB 또는 API에서 데이터 불러와 뿌려주는
  ex) 상품 목록, 게시판 리스트, 뉴스기사와 같은
*/

// -----------------------------------------------------------------------------

/*
<정적 렌더링>
- 빌드 타임이나 요청 시 서버에서 데이터를 미리 가져와서 HTML생성 
  ex) 블로그 글 목록, 상품 리스트 등 (한번에 가져오면 바뀔 일이 적음)
  ---> 사용자 입장에서는 "깜빡임(로딩)" 이 없다
  
<동적 렌더링>
- useState, useEffect, API fetch 등을 클라이언트에서 실행
  (브라우저에서 JS로 데이터를 가져오기 떄문에 로딩창 혹은 깜빡임이 발생할 수 있다)
  ex) 사용자 입력, 실시간 데이터 등에서 필요함
*/